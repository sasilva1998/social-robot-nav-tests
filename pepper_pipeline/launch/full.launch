<launch>

    <arg name="online" default="true" />

    <arg name="launch_control_trajectory_all" default="true" />

    <arg name="configuration_basename" default="pepper_lds_pure2d.lua" />

    <arg name="moveit" default="false" />
    <arg name="mapping" default="false" />
    <arg name="localization" default="false" />
    <arg name="navigation" default="false" />

    <arg name="pkg_gazebo_worlds" default="$(find cob_gazebo_worlds)" />
    <arg name="pkg_env_config" default="$(find cob_default_env_config)" />
    <arg name="robot_env" default="empty" />
    <arg name="world_name" default="$(find pepper_pipeline)/worlds/empty_default.world" />

    <arg name="debug" default="false" />
    <arg name="headless" default="false" />
    <arg name="paused" default="false" />
    <arg name="use_sim_time" default="true" />
    <arg name="gui" default="false" />

    <arg name="x_pos" default="-12" />
    <arg name="y_pos" default="2.5" />

    <!-- <arg name="x_pos" default="1.51" />
    <arg name="y_pos" default="-1.51" /> -->

    <!-- COB world spawn -->
    <env name="GAZEBO_MODEL_PATH" value="$(arg pkg_gazebo_worlds)/Media/models:$(optenv GAZEBO_MODEL_PATH)" />

    <!-- upload default configuration parameters -->
    <include file="$(arg pkg_env_config)/upload_navigation_goals.launch">
        <arg name="robot_env" value="$(arg robot_env)" />
    </include>

    <include file="$(arg pkg_env_config)/upload_object_locations.launch">
        <arg name="robot_env" value="$(arg robot_env)" />
    </include>

    <include file="$(find pepper_pipeline)/launch/empty_world.launch">
        <arg name="world_name" value="$(arg world_name)" />
        <arg name="debug" value="$(arg debug)" />
        <arg name="headless" value="$(arg headless)" />
        <arg name="paused" value="$(arg paused)" />
        <arg name="use_sim_time" value="$(arg use_sim_time)" />
        <arg name="gui" value="$(arg gui)" />
    </include>

    <!-- Spawn a robot into Gazebo -->
    <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="-urdf -param robot_description -model pepper_robot -x $(arg x_pos) -y $(arg y_pos) -z 0.05" />

    <!-- spawn environment and start environment-specific nodes -->
    <include file="$(arg pkg_gazebo_worlds)/launch/$(arg robot_env).xml">
        <arg name="robot_env" value="$(arg robot_env)" />
    </include>

    <!-- Load the URDF Model -->
    <include file="$(find pepper_description)/launch/pepper_upload_CPU.launch" />

    <!-- Call Pepper Robot Trajectory Controller -->
    <include file="$(find pepper_control)/launch/pepper_control_trajectory.launch" unless="$(arg launch_control_trajectory_all)" />
    <include file="$(find pepper_control)/launch/pepper_control_trajectory_all.launch" if="$(arg launch_control_trajectory_all)" />

    <!-- Given the published joint states, publish tf for the robot links -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="true" />


    <node name="lower_arms" pkg="pepper_gazebo_plugin" type="arms_down.sh" />

    <node name="laser_publisher" pkg="pepper_gazebo_plugin" type="laser_publisher.py" />

    <!-- gazebo physics parameters changed for faster simulation -->
    <!-- this is chaotic with the Pepper, works fine with COB4 -->
    <!-- <node name="gazebo_physics_config" pkg="dynamic_reconfigure" type="dynparam" args="set_from_parameters gazebo">
        <rosparam file="$(find test_pepper_simulation_bringup)/param/physics_gazebo.yaml" command="load" />
    </node> -->

    <!-- move it config -->
    <group if="$(arg moveit)">
        <arg name="robot_description" default="robot_description" />
        <param name="$(arg robot_description)_semantic" textfile="$(find pepper_moveit_config)/config/JulietteY20MP.srdf" />

        <!-- Load updated joint limits (override information from URDF) -->
        <group ns="$(arg robot_description)_planning">
            <rosparam command="load" file="$(find pepper_moveit_config)/config/joint_limits.yaml" />
        </group>

        <!-- Load default settings for kinematics; these settings are overridden by settings in a node's namespace -->
        <group ns="$(arg robot_description)_kinematics">
            <rosparam command="load" file="$(find pepper_moveit_config)/config/kinematics.yaml" />
        </group>

        <!-- Run the main MoveIt executable without trajectory execution (we do not have controllers configured by default) -->
        <include file="$(find pepper_moveit_config)/launch/move_group.launch">
            <arg name="allow_trajectory_execution" value="true" />
            <arg name="fake_execution" value="false" />
            <arg name="info" value="true" />
            <arg name="debug" value="$(arg debug)" />
        </include>

        <!-- Moving Pepper to its home state -->
        <!-- <node pkg="test_pepper_common_bringup" type="pepper_moveit_home" name="pepper_moveit_home" output="screen" /> -->

        <!-- 
        <group unless="$(arg mapping)">
            <group unless="$(arg localization)">
                <group unless="$(arg navigation)">
                    <node pkg="tf" type="static_transform_publisher" name="virtual_joint_broadcaster_1" args="0 0 0 0 0 0 world odom 100" />
                </group>
            </group>
        </group> -->
    </group>

    <!-- Mapping! -->

    <group if="$(arg mapping)">

        <!-- testing controllers -->
        <!-- to use mbf -->
        <!-- <node pkg="pepper_pipeline" type="mbf_client" name="mbf_path_execute" /> -->

        <node pkg="pepper_pipeline" type="odom_publisher" name="odom_publisher" />

        <!-- to use own Juan controller -->
        <!-- <include file="$(find fetch_move_base_control)/launch/pepper_move_base_control.launch" /> -->


        <group if="$(arg online)">
            <node pkg="octomap_server" type="octomap_server_node" name="octomap_server">
                <param name="resolution" value="0.05" />
                <param name="frame_id" type="string" value="world" />
                <param name="pointcloud_min_z" type="double" value="0.1" />
                <param name="latch" type="bool" value="false" />
                <remap from="cloud_in" to="/pepper/camera/depth/points_filtered" />
            </node>
        </group>

        <group unless="$(arg online)">
            <!-- with octomap -->
            <!-- pre-made map for localization -->
            <arg name="map_file" default="$(find pepper_pipeline)/map/offline_complete_map.bt" />
            <!-- Map server -->
            <node pkg="octomap_server" name="octomap_server" type="octomap_server_node" args="$(arg map_file)" />
        </group>


        <!-- <arg name="unified_laser_scan" default="false" /> -->

        <!-- dynamic map generation from unified scan -->
        <!-- <node pkg="gmapping" type="slam_gmapping" name="slam_gmapping" output="screen">
            <remap from="scan" to="/pepper/laser_2" unless="$(arg unified_laser_scan)" />
            <remap from="scan" to="scan_unified" if="$(arg unified_laser_scan)" />
            <param name="maxUrange" type="int" value="8" />
            <param name="xmin" type="int" value="-8" />
            <param name="ymin" type="int" value="-8" />
            <param name="xmax" type="int" value="8" />
            <param name="ymax" type="int" value="8" />
            <param name="odom_frame" type="string" value="odom" />
        </node> -->

        <!-- section only for offline -->

        <!-- pre-made map for localization -->
        <arg name="map_file" default="$(find test_pepper_simulation_bringup)/maps/map.yaml" />
        <!-- Map server -->
        <node pkg="map_server" name="map_server" type="map_server" args="$(arg map_file)" />

        <!-- start amcl -->
        <!-- <node pkg="amcl" type="amcl" name="amcl">
            <remap from="scan" to="/pepper/laser_2" />
            <param name="odom_model_type" value="omni" />
            <param name="transform_tolerance" value="0.2" />
            <param name="gui_publish_rate" value="-1.0" />
            <param name="laser_max_beams" value="180" />
            <param name="laser_max_range" value="10" />
            <param name="min_particles" value="100" />
            <param name="max_particles" value="5000" />
            <param name="kld_err" value="0.01" />
            <param name="kld_z" value="0.99" />
            <param name="odom_alpha1" value="0.1" />
            <param name="odom_alpha2" value="0.1" />
            <param name="odom_alpha3" value="0.1" />
            <param name="odom_alpha4" value="0.1" />
            <param name="odom_alpha5" value="0.1" />
            <param name="laser_z_hit" value="0.95" />
            <param name="laser_z_short" value="0.1" />
            <param name="laser_z_max" value="0.05" />
            <param name="laser_z_rand" value="0.05" />
            <param name="laser_sigma_hit" value="0.2" />
            <param name="laser_lambda_short" value="0.1" />
            <param name="laser_model_type" value="likelihood_field" />
            <param name="laser_likelihood_max_dist" value="2.0" />
            <param name="update_min_d" value="0.2" />
            <param name="update_min_a" value="0.2" />
            <param name="odom_frame_id" value="odom" />
            <param name="base_frame_id" value="base_footprint" />
            <param name="global_frame_id" value="map" />
            <param name="resample_interval" value="2" />
            <param name="transform_tolerance" value="0.1" />
            <param name="recovery_alpha_slow" value="0.0" />
            <param name="recovery_alpha_fast" value="0.0" />
        </node> -->

        <!-- <include file="$(find fetch_move_base_planning)/launch/pepper_move_base_planning.launch" /> -->
        <!-- <include file="$(find fetch_move_base_mapping)/launch/pepper_move_base_mapping.launch" /> -->
        <!-- <include file="$(find fetch_move_base_control)/launch/pepper_move_base_control.launch" /> -->

        <!-- Not using Cartographer because of an odom shifting problem -->
        <!-- cartographer_node -->
        <!-- <node pkg="cartographer_ros" type="cartographer_node" name="cartographer_node" args="-configuration_directory $(find test_pepper_simulation_bringup)/config
                  -configuration_basename $(arg configuration_basename)" output="screen">
                <remap from="scan" to="/pepper/laser_2" />
            </node> -->
        <!-- cartographer_occupancy_grid_node -->
        <!-- <node pkg="cartographer_ros" type="cartographer_occupancy_grid_node" name="cartographer_occupancy_grid_node" args="-resolution 0.05" /> -->

        <!-- <node name="move_base_flex" pkg="mbf_costmap_nav" type="mbf_costmap_nav" required="true" output="screen" clear_params="true">
            <rosparam file="$(find pepper_pipeline)/param/costmap_common_params.yaml" command="load" ns="global_costmap" />
            <rosparam file="$(find pepper_pipeline)/param/costmap_common_params.yaml" command="load" ns="local_costmap" />
            <rosparam file="$(find pepper_pipeline)/param/local_costmap_params.yaml" command="load" />
            <rosparam file="$(find pepper_pipeline)/param/global_costmap_params.yaml" command="load" />
            <rosparam file="$(find pepper_pipeline)/param/move_base_flex.yaml" command="load" />
            <rosparam file="$(find pepper_pipeline)/param/eband_local_planner.yaml" command="load" ns="eband_local_planner/EBandPlannerROS" />
            <remap from="cmd_vel" to="/pepper/cmd_vel" />
            <remap from="odom" to="/pepper/odom_groundtruth" />
        </node> -->

    </group>


    <!-- Localization is only possible when Mapping is set to false -->
    <group unless="$(arg mapping)">
        <group if="$(arg localization)">

            <!-- with octomap -->
            <!-- pre-made map for localization -->
            <arg name="map_file" default="$(find pepper_pipeline)/map/map_laser_octomap_2.bt" />
            <!-- Map server -->
            <node pkg="octomap_server" name="octomap_server" type="octomap_server_node" args="$(arg map_file)" />


            <!-- pre-made map for localization -->
            <!-- <arg name="map_file" default="$(find test_pepper_simulation_bringup)/maps/map.yaml" /> -->
            <!-- Map server -->
            <!-- <node pkg="map_server" name="map_server" type="map_server" args="$(arg map_file)" /> -->

            <!-- start amcl -->
            <node pkg="amcl" type="amcl" name="amcl">
                <remap from="scan" to="/pepper/laser_2" />
                <param name="odom_model_type" value="omni" />
                <param name="transform_tolerance" value="0.2" />
                <param name="gui_publish_rate" value="-1.0" />
                <param name="laser_max_beams" value="180" />
                <param name="laser_max_range" value="10" />
                <param name="min_particles" value="100" />
                <param name="max_particles" value="5000" />
                <!--param name="update_min_a" value="1.0"/-->
                <param name="kld_err" value="0.01" />
                <param name="kld_z" value="0.99" />
                <param name="odom_alpha1" value="0.1" />
                <param name="odom_alpha2" value="0.1" />
                <!-- translation std dev, m -->
                <param name="odom_alpha3" value="0.1" />
                <param name="odom_alpha4" value="0.1" />
                <param name="odom_alpha5" value="0.1" />
                <param name="laser_z_hit" value="0.95" />
                <param name="laser_z_short" value="0.1" />
                <param name="laser_z_max" value="0.05" />
                <param name="laser_z_rand" value="0.05" />
                <param name="laser_sigma_hit" value="0.2" />
                <param name="laser_lambda_short" value="0.1" />
                <param name="laser_model_type" value="likelihood_field" />
                <!-- <param name="laser_model_type" value="beam"/> -->
                <param name="laser_likelihood_max_dist" value="2.0" />
                <param name="update_min_d" value="0.2" />
                <param name="update_min_a" value="0.2" />
                <param name="odom_frame_id" value="odom" />
                <param name="base_frame_id" value="base_footprint" />
                <param name="global_frame_id" value="map" />
                <param name="resample_interval" value="2" />
                <param name="transform_tolerance" value="0.1" />
                <param name="recovery_alpha_slow" value="0.0" />
                <param name="recovery_alpha_fast" value="0.0" />
            </node>
        </group>
    </group>


    <group unless="$(arg mapping)">
        <group if="$(arg localization)">
            <group if="$(arg navigation)">
                <arg name="pkg_nav_config" default="$(find test_pepper_simulation_bringup)" />
                <!-- delete old parameters -->
                <rosparam command="delete" param="/move_base" />

                <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
                    <remap from="cmd_vel" to="/pepper/cmd_vel" />
                    <remap from="odom" to="/pepper/odom" />
                    <param name="controller_frequency" value="10" />
                    <!-- Use the dwa local planner for the PR2 -->
                    <param name="base_local_planner" value="dwa_local_planner/DWAPlannerROS" />
                    <!--- load common configuration files -->
                    <rosparam file="$(arg pkg_nav_config)/config/costmap_common_params.yaml" command="load" ns="global_costmap" />
                    <rosparam file="$(arg pkg_nav_config)/config/costmap_common_params.yaml" command="load" ns="local_costmap" />
                    <!--- load global navigation specific parameters -->
                    <rosparam file="$(arg pkg_nav_config)/config/local_costmap_params.yaml" command="load" ns="local_costmap" />
                    <rosparam file="$(arg pkg_nav_config)/config/global_costmap_params.yaml" command="load" ns="global_costmap" />
                    <!--- load planner parameters -->
                    <rosparam file="$(arg pkg_nav_config)/config/base_local_planner_params.yaml" command="load" />
                    <rosparam file="$(arg pkg_nav_config)/config/dwa_local_planner.yaml" command="load" ns="DWAPlannerROS" />
                </node>
            </group>
        </group>
    </group>

    <node pkg="tf" type="static_transform_publisher" name="virtual_joint_broadcaster_0" args="0 0 0 0 0 0 world odom 1000" />

    <arg name="bringup_package_path" value="$(find pepper_pipeline)" />
    <arg name="config" default="default" />
    <arg name="output" default="screen" />
    <arg name="respawn" default="false" />
    <arg name="rviz_gui" default="true" />

    <!-- RVIZ GUI -->

    <group if="$(arg rviz_gui)">
        <node respawn="$(arg respawn)" name="$(anon rviz)" pkg="rviz" type="rviz" args="-d $(arg bringup_package_path)/rviz/$(arg config).rviz" output="$(arg output)" />
    </group>

    <include file="$(find pepper_pipeline)/launch/pointcloud_filter.launch" />

</launch>